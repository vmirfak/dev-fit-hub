// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id        String   @id @default(uuid())
  role_name String   @unique
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id          String     @id @default(uuid())
  username    String     @unique
  email       String     @unique
  address     String?
  phone_number String?
  birthday    DateTime?
  profession  String?     // Added field
  gender      String?     // Added field
  age         Int?        // Added field
  state       String      @default("active") // Added field with default value
  pregnant    Boolean     @default(false)    // Added field with default value
  bio         String?     // Added field
  role        Role?       @relation(fields: [roleId], references: [id])
  roleId      String?
  exercisePlans ExercisePlan[]
  dietPlans   DietPlan[]
  evaluations  Evaluation[]
  feedbacks    Feedback[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model ExercisePlan {
  id          String         @id @default(uuid())
  userId      String
  weekNumber  Int
  daysPerWeek Int
  objective   String?        // Added field
  user        User           @relation(fields: [userId], references: [id])
  exerciseGroups ExerciseGroup[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model ExerciseGroup {
  id                String         @id @default(uuid())
  exercisePlanId    String
  day               Int
  targetedGroup     String
  exercisePlan      ExercisePlan    @relation(fields: [exercisePlanId], references: [id])
  exercises         Exercise[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model Exercise {
  id               String          @id @default(uuid())
  exerciseGroupId  String
  name             String
  amountOfSets     Int
  exerciseGroup    ExerciseGroup    @relation(fields: [exerciseGroupId], references: [id])
  sets             Set[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Set {
  id         String     @id @default(uuid())
  exerciseId String
  reps       Int
  exercise   Exercise    @relation(fields: [exerciseId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model DietPlan {
  id          String      @id @default(uuid())
  userId      String
  objective   String?     // Added field
  numberOfMeals Int?      // Added field
  vegetarian  Boolean     @default(false) // Added field
  user        User        @relation(fields: [userId], references: [id])
  meals       Meal[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Meal {
  id         String      @id @default(uuid())
  dietPlanId String
  mealTime   String
  mealType   String      @default("BREAKFAST") // Using default for one of the meal types
  dietPlan   DietPlan    @relation(fields: [dietPlanId], references: [id])
  recipes    Recipe[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Recipe {
  id          String      @id @default(uuid())
  mealId      String
  name        String
  servings    Int
  protein     Float?
  carbs       Float?
  fat         Float?
  calories    Float?
  glutenFree  Boolean     @default(false)  // Added filter field
  vegan       Boolean     @default(false)  // Added filter field
  dairyFree   Boolean     @default(false)  // Added filter field
  lowCarb     Boolean     @default(false)  // Added filter field
  highProtein Boolean     @default(false)  // Added filter field
  quickPrep   Boolean     @default(false)  // Added filter field
  meal        Meal        @relation(fields: [mealId], references: [id])
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Evaluation {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  evaluationDate DateTime @default(now())
  data        Json?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Feedback {
  id          String     @id @default(uuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  rating      Int        @check(rating >= 1 AND rating <= 5)
  category    String?
  description String?
  name        String?
  email       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
